{
  "List":[
    {
      "id": 1,
      "description": "test",
      "name": "test",
      "action": "action",
      "status": "status",
      "text": "declare({\n    match: function (barcodeSpecs, strBarcode) {\n        var regexp = /^PD4permen\\|5904123809\\|.+$/;\n        var res = strBarcode.search(regexp);\n        var matchRes = {\n            match: res > -1,\n            dropAll: false,\n            dropDefault: true\n        };\n        return matchRes;\n    },\n    parse: function parse(barcodeSpecs, strBarcode) {\n        var splited = strBarcode.split(barcodeSpecs.delimiter);\n        var requisites = {};\n        function BarcodeDecodingException(message) {\n            this.message = message;\n            this.name = 'BarcodeDecodingException';\n        }\n        if (splited.length < 5) {\n            throw new BarcodeDecodingException(\"can't split barcode. Too few requisites\");\n        }\n        requisites.PayeeINN = splited[1];\n        requisites.Sum = splited[2];\n        var strAttr = splited[4];\n\n        requisites.paymAttr = strAttr;\n        var splitedAttrs = strAttr.split('; ');\n\n        if (strAttr.length) {\n            for (var attrkey in splitedAttrs) {\n                var temparam = splitedAttrs[attrkey].split(': ');\n                var key = temparam[0];\n                var value = temparam[1];\n                if (key == undefined) {\n                    throw new BarcodeDecodingException(\"can't parse key in strAttr = \" + strAttr);\n                }\n                if (value == undefined) {\n                    value = null;\n                }\n                if (key in requisites) {\n                    throw new BarcodeDecodingException(\"duplicate requisite: \" + temparam[0]);\n                }\n                requisites[key] = value;\n            }\n        }\n\n        return requisites;\n    },\n    map: function (fields, requisites) {\n        requisites['АДРЕС'] = requisites['УЛИЦА'] + ', ' + requisites['ДОМ'] + '-' + requisites['КВАРТИРА'];\n        var attrAndAmount = defaultMappers.map(fields, requisites);\n        return attrAndAmount\n    }\n});"
    },
    {
      "id": 2,
      "description": "test",
      "name": "test",
      "action": "action",
      "status": "status",
      "text": "declare({\n    match: function (barcodeSpecs, strBarcode) {\n        var regexp = /^PD4permen\\|5904123809\\|.+$/;\n        var res = strBarcode.search(regexp);\n        var matchRes = {\n            match: res > -1,\n            dropAll: false,\n            dropDefault: true\n        };\n        return matchRes;\n    },\n    parse: function parse(barcodeSpecs, strBarcode) {\n        var splited = strBarcode.split(barcodeSpecs.delimiter);\n        var requisites = {};\n        function BarcodeDecodingException(message) {\n            this.message = message;\n            this.name = 'BarcodeDecodingException';\n        }\n        if (splited.length < 5) {\n            throw new BarcodeDecodingException(\"can't split barcode. Too few requisites\");\n        }\n        requisites.PayeeINN = splited[1];\n        requisites.Sum = splited[2];\n        var strAttr = splited[4];\n\n        requisites.paymAttr = strAttr;\n        var splitedAttrs = strAttr.split('; ');\n\n        if (strAttr.length) {\n            for (var attrkey in splitedAttrs) {\n                var temparam = splitedAttrs[attrkey].split(': ');\n                var key = temparam[0];\n                var value = temparam[1];\n                if (key == undefined) {\n                    throw new BarcodeDecodingException(\"can't parse key in strAttr = \" + strAttr);\n                }\n                if (value == undefined) {\n                    value = null;\n                }\n                if (key in requisites) {\n                    throw new BarcodeDecodingException(\"duplicate requisite: \" + temparam[0]);\n                }\n                requisites[key] = value;\n            }\n        }\n\n        return requisites;\n    },\n    map: function (fields, requisites) {\n        requisites['АДРЕС'] = requisites['УЛИЦА'] + ', ' + requisites['ДОМ'] + '-' + requisites['КВАРТИРА'];\n        var attrAndAmount = defaultMappers.map(fields, requisites);\n        return attrAndAmount\n    }\n});"
    }
  ]
}